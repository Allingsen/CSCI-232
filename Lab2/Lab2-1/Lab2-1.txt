B. i) Times I got:                      Java ThreeSumDoubling:          Difference:
      250 0.012947                      250 0.000000                    0.012947 seconds (This is because I used System.nanoTime())
      500 0.012489                      500 0.031250                    0.018761 seconds
      1000 0.103549                     1000 0.359375                   0.255826 seconds
      2000 0.768919                     2000 3.062500                   2.293581 seconds
      4000 5.604083                     4000 30.046875                  24.442792 seconds  
      8000 61.040329                    8000 304.078125                 243.037796 seconds
N = 1.192193921875 x 10^-10         N = 5.93902588 x 10^-10             4.74683196 x 10^-10 seconds
My computer seems to run the code in about 1/6 of the time, but still follows the exponential trend of the example.

    ii) (1.192193921875 x 10^-10) x 16000^3 = 488.3226304 seconds


C. i)   int sum = 0;
        for (int k = n; k > 0; k /= 2)
            for (int i = 0; i < k; i++)
                sum++;

        TIME EQUATION: 4(log(N)) + 2n + 1
        BIG O: O(Log(N))

   ii) int sum = 0;
        for (int i = 1; i < n; i *=2)
            for (int j = 0; j < i; j++)
                sum++;
        
        TIME EQUATION: 
        BIG O: 

   iii) int sum = 0;
        for (int i = 1; i < n; i *=2)
            for (int j = 0; j < n; j++)
                sum++;

        TIME EQUATION: 
        BIG O: O(N^2)